# Multi-stage build for maapallo.info production deployment

# Build stage for client
FROM node:18-alpine AS client-build

WORKDIR /app/client

# Copy client package files
COPY client/package*.json ./

# Alternative approach: Use npm install if npm ci fails
# Configure npm and try multiple approaches
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-timeout 120000 && \
    npm config set fetch-retries 3 && \
    npm config set fetch-retry-factor 2 && \
    npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000 && \
    (npm ci --verbose || npm install --verbose)

# Copy client source code
COPY client/ ./

# Build argument for Cesium Ion token (needed at build time for webpack)
ARG CESIUM_ION_TOKEN
ENV CESIUM_ION_TOKEN=${CESIUM_ION_TOKEN}

# Build the client application
# Note: CESIUM_ION_TOKEN is required for webpack build process
RUN npm run build

# Production stage
FROM python:3.11-slim AS production

# Note: Sensitive environment variables should be passed at runtime, not build time
# These will be provided through docker run -e or docker-compose environment sections

# Set the working directory
WORKDIR /app

# Install system dependencies
# Use debian-based packages for better compatibility
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    postgresql-client \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy server requirements and install Python dependencies
COPY server/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy server source code
COPY server/ ./

# Copy built client files to serve as static files
COPY --from=client-build /app/client/dist ./static

# Copy Cesium assets for production
COPY --from=client-build /app/client/node_modules/cesium/Build/Cesium ./static/cesium

# Copy world.geojson file for the application
COPY client/public/data/world.geojson ./static/data/

# Set environment variables
ENV PYTHONPATH=/app
ENV PORT=8080
ENV ENVIRONMENT=production

# Create non-root user for security (Debian syntax)
RUN groupadd -g 1001 appgroup && \
    useradd -r -u 1001 -g appgroup -s /bin/false appuser

# Change ownership of app directory
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/api/v1/health || exit 1

# Start command - run FastAPI directly
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080"]

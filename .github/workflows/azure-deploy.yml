name: Build, Test and Deploy to Azure

on:
  push:
    branches:
      - main # Changed from master to main

env:
  ACR_REGISTRY: maapalloregistry.azurecr.io
  APP_NAME: maapallo-info-app
  RESOURCE_GROUP: maapallo-info-group

jobs:
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Create .env file for testing
  #       run: |
  #         echo "CESIUM_ION_TOKEN=${{ secrets.CESIUM_ION_TOKEN }}" > .env

  #     - name: Setup Node.js for client
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #         cache: "npm"
  #         cache-dependency-path: "client/package-lock.json"

  #     - name: Install client dependencies
  #       run: |
  #         cd client
  #         npm ci

  #     - name: Setup Python for server
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"

  #     - name: Install server dependencies
  #       run: |
  #         cd server
  #         pip install -r requirements.txt

  #     - name: Run server tests (placeholder)
  #       run: |
  #         cd server
  #         echo "Server tests would run here"
  #         # Add actual Python tests when available

  #     - name: Cache Cypress binary
  #       uses: actions/cache@v3
  #       id: cypress-cache
  #       with:
  #         path: ~/.cache/Cypress
  #         key: cypress-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           cypress-${{ runner.os }}-

  #     - name: Start application services
  #       run: |
  #         docker compose up -d
  #         sleep 30  # Wait for services to be ready
  #         docker compose ps

  #     - name: Cypress run
  #       uses: cypress-io/github-action@v6
  #       with:
  #         working-directory: client
  #         spec: cypress/e2e/feature-form.cy.js
  #         wait-on: "http://localhost:8080"
  #         wait-on-timeout: 120
  #         install: false # Already installed

  build-and-deploy:
    name: Build and Deploy
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production.geoserver
          push: true
          tags: ${{ env.ACR_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}, ${{ env.ACR_REGISTRY }}/${{ env.APP_NAME }}:latest
          build-args: |
            CESIUM_ION_TOKEN=${{ secrets.CESIUM_ION_TOKEN }}
            BASIC_AUTH_USERNAME=${{ secrets.BASIC_AUTH_USERNAME }}
            BASIC_AUTH_PASSWORD=${{ secrets.BASIC_AUTH_PASSWORD }}
            GEOSERVER_ADMIN_USER=${{ secrets.GEOSERVER_ADMIN_USER }}
            GEOSERVER_ADMIN_PASSWORD=${{ secrets.GEOSERVER_ADMIN_PASSWORD }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          images: ${{ env.ACR_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}

      - name: Configure App Service Environment Variables
        run: |
          echo "Setting up environment variables..."
          az webapp config appsettings set \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --settings \
              GEOSERVER_URL="http://localhost:8081/geoserver" \
              GEOSERVER_ADMIN_USER="${{ secrets.GEOSERVER_ADMIN_USER }}" \
              GEOSERVER_ADMIN_PASSWORD="${{ secrets.GEOSERVER_ADMIN_PASSWORD }}" \
              BASIC_AUTH_USERNAME="${{ secrets.BASIC_AUTH_USERNAME }}" \
              BASIC_AUTH_PASSWORD="${{ secrets.BASIC_AUTH_PASSWORD }}" \
              ENVIRONMENT="production"

      - name: Restart Web App to trigger migrations
        run: |
          echo "Restarting web app to ensure migrations run on startup..."
          az webapp restart --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}
          echo "âœ… Web app restarted - migrations will run automatically on startup"

# Multi-stage build for maapallo.info production deployment with GeoServer

# Build stage for client
FROM node:20-alpine AS client-build

WORKDIR /app/client

# Copy client package files
COPY client/package*.json ./
RUN npm ci

# Copy client source code
COPY client/ ./

# Build argument for Cesium Ion token
ARG CESIUM_ION_TOKEN
ENV CESIUM_ION_TOKEN=${CESIUM_ION_TOKEN}

# Build arguments for basic auth
ARG BASIC_AUTH_USERNAME
ARG BASIC_AUTH_PASSWORD

# Build the client application
RUN npm run build

# Production stage with both Python and GeoServer
FROM python:3.11-slim AS production

# Build arguments for sensitive data
ARG BASIC_AUTH_USERNAME
ARG BASIC_AUTH_PASSWORD
ARG GEOSERVER_ADMIN_USER=admin
ARG GEOSERVER_ADMIN_PASSWORD=geoserver

# Install system dependencies including Java for GeoServer
RUN apt-get update && apt-get install -y \
    postgresql-client \
    curl \
    wget \
    unzip \
    default-jre-headless \
    && rm -rf /var/lib/apt/lists/*

# Set up Java environment
ENV JAVA_HOME=/usr/lib/jvm/default-java
ENV PATH="$JAVA_HOME/bin:$PATH"

# Install Tomcat
ENV CATALINA_HOME=/opt/tomcat
ENV TOMCAT_VERSION=9.0.82
RUN wget -q -O /tmp/apache-tomcat-${TOMCAT_VERSION}.tar.gz \
    https://archive.apache.org/dist/tomcat/tomcat-9/v${TOMCAT_VERSION}/bin/apache-tomcat-${TOMCAT_VERSION}.tar.gz && \
    mkdir -p ${CATALINA_HOME} && \
    tar -xzf /tmp/apache-tomcat-${TOMCAT_VERSION}.tar.gz -C ${CATALINA_HOME} --strip-components=1 && \
    rm /tmp/apache-tomcat-${TOMCAT_VERSION}.tar.gz && \
    chmod +x ${CATALINA_HOME}/bin/*.sh

# Download and install GeoServer
ENV GEOSERVER_VERSION=2.24.1
RUN curl -L -o /tmp/geoserver.war \
    "https://build.geoserver.org/geoserver/${GEOSERVER_VERSION}/geoserver-${GEOSERVER_VERSION}-war.war" && \
    cp /tmp/geoserver.war ${CATALINA_HOME}/webapps/geoserver.war && \
    rm /tmp/geoserver.war

# Set up Python application
WORKDIR /app

# Copy server requirements and install Python dependencies
COPY server/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy server source code
COPY server/ ./

# Copy built client files to serve as static files
COPY --from=client-build /app/client/dist ./static

# Copy Cesium assets for production
COPY --from=client-build /app/client/node_modules/cesium/Build/Cesium ./static/cesium

# Copy world.geojson file for the application
COPY client/public/data/world.geojson ./static/data/

# Copy production startup script
COPY start-production.sh /app/
RUN chmod +x /app/start-production.sh

# Make existing startup script executable
RUN chmod +x start.sh

# Create GeoServer data directory
RUN mkdir -p /opt/geoserver/data_dir && \
    chown -R 1000:1000 /opt/geoserver/data_dir

# Set environment variables
ENV PYTHONPATH=/app
ENV PORT=8080
ENV ENVIRONMENT=production
ENV GEOSERVER_URL=http://localhost:8081/geoserver
ENV GEOSERVER_DATA_DIR=/opt/geoserver/data_dir
ENV CATALINA_HOME=/opt/tomcat

# Note: Sensitive environment variables (BASIC_AUTH_*, GEOSERVER_ADMIN_*)
# are set at runtime by Azure App Service for security

# Expose port (both FastAPI and GeoServer accessible through port 8080)
EXPOSE 8080

# Health check that waits longer for both services to start
HEALTHCHECK --interval=45s --timeout=15s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:8080/api/v1/health && \
    curl -f http://localhost:8081/geoserver/web/ || exit 1

# Start both services
CMD ["/app/start-production.sh"]
